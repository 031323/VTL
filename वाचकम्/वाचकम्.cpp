#include<cstdio>
#include<VocalTractLabApi.h>
#include<list>
#include<algorithm>

enum वर्णः {अत्=1,आत्,इत्,ईत्,उत्,ऊत्,ऋत्,ॠत्,ऌत्,ॡत्,एत्,ऐत्,ओत्,औत्,
					कः,खः,गः,घः,ङः,चः,छः,जः,झः,ञः,टः,ठः,डः,ढः,णः,तः,थः,दः,धः,नः,पः,फः,बः,भः,मः,यः,रः,लः,वः,शः,षः,सः,हः,
					विसर्गः,अनुस्वारः,लँः};

[[maybe_unused]] constexpr वर्णः
		स्वरः[]={अत्,आत्,इत्,ईत्,उत्,ऊत्,ऋत्,ॠत्,ऌत्,ॡत्,एत्,ऐत्,ओत्,औत्},
		ह्रस्वः[]={अत्,इत्,उत्,ऋत्,ऌत्},
		दीर्घः[]={आत्,ईत्,ऊत्,ॠत्,ॡत्,एत्,ऐत्,ओत्,औत्},
		व्यञ्जनः[]={कः,खः,गः,घः,ङः,चः,छः,जः,झः,ञः,टः,ठः,डः,ढः,णः,तः,थः,दः,धः,नः,पः,फः,बः,भः,मः,यः,रः,लः,वः,शः,षः,सः,हः},
		उष्मा[]={शः,षः,सः,हः},
		अन्तःस्थः[]={यः,रः,लः,वः},
		नासिक्यः[]={अनुस्वारः,ङः,ञः,णः,नः,मः},
		वर्गीयः[]={कः,खः,गः,घः,ङः,चः,छः,जः,झः,ञः,टः,ठः,डः,ढः,णः,तः,थः,दः,धः,नः,पः,फः,बः,भः,मः},
		कवर्गीयः[]={कः,खः,गः,घः,ङः},
		चवर्गीयः[]={चः,छः,जः,झः,ञः},
		टवर्गीयः[]={टः,ठः,डः,ढः,णः},
		तवर्गीयः[]={तः,थः,दः,धः,नः},
		पवर्गीयः[]={पः,फः,बः,भः,मः},
		खरः[]={कः,चः,टः,तः,पः},
		अतिखरः[]={खः,छः,ठः,थः,फः},
		मृदुः[]={गः,जः,डः,दः,बः},
		घोषः[]={घः,झः,ढः,धः,भः};

template <size_t गणना>
bool अधिकारः(वर्णः द्रष्टव्यः,const वर्णः (&गणः)[गणना])
{
	for(int क्रमः=0;क्रमः<गणना;क्रमः++)if(द्रष्टव्यः==गणः[क्रमः])return true;
	return false;
}

auto वर्णनिर्णयः(const char* पाठः)
{
	std::list<वर्णः> वर्णाः;
	std::list<int> स्वराः;
	std::list<int> स्वरक्रमः;
	auto समत्वम्=[](const char* प्रथमः,const char* द्वितीयः)
	{
		for(int क्रमः=0;क्रमः<3;क्रमः++)
			if(प्रथमः[क्रमः]!=द्वितीयः[क्रमः])return false;
		return true;
	};
	auto लक्ष्यः=[समत्वम्](const char* अङ्कः,वर्णः &उपस्थितः)
	{
		उपस्थितः=
			समत्वम्(अङ्कः,"क")?कः:समत्वम्(अङ्कः,"ख")?खः:समत्वम्(अङ्कः,"ग")?गः:समत्वम्(अङ्कः,"घ")?घः:समत्वम्(अङ्कः,"ङ")?ङः:
			समत्वम्(अङ्कः,"च")?चः:समत्वम्(अङ्कः,"छ")?छः:समत्वम्(अङ्कः,"ज")?जः:समत्वम्(अङ्कः,"झ")?झः:समत्वम्(अङ्कः,"ञ")?ञः:
			समत्वम्(अङ्कः,"ट")?टः:समत्वम्(अङ्कः,"ठ")?ठः:समत्वम्(अङ्कः,"ड")?डः:समत्वम्(अङ्कः,"ढ")?ढः:समत्वम्(अङ्कः,"ण")?णः:
			समत्वम्(अङ्कः,"त")?तः:समत्वम्(अङ्कः,"थ")?थः:समत्वम्(अङ्कः,"द")?दः:समत्वम्(अङ्कः,"ध")?धः:समत्वम्(अङ्कः,"न")?नः:
			समत्वम्(अङ्कः,"प")?पः:समत्वम्(अङ्कः,"फ")?फः:समत्वम्(अङ्कः,"ब")?बः:समत्वम्(अङ्कः,"भ")?भः:समत्वम्(अङ्कः,"म")?मः:
			समत्वम्(अङ्कः,"य")?यः:समत्वम्(अङ्कः,"र")?रः:समत्वम्(अङ्कः,"ल")?लः:समत्वम्(अङ्कः,"व")?वः:
			समत्वम्(अङ्कः,"श")?शः:समत्वम्(अङ्कः,"ष")?षः:समत्वम्(अङ्कः,"स")?सः:समत्वम्(अङ्कः,"ह")?हः:
			समत्वम्(अङ्कः,"ः")?विसर्गः:समत्वम्(अङ्कः,"ं")?अनुस्वारः:
			समत्वम्(अङ्कः,"अ")?अत्:समत्वम्(अङ्कः,"आ")||समत्वम्(अङ्कः,"ा")?आत्:समत्वम्(अङ्कः,"इ")||समत्वम्(अङ्कः,"ि")?इत्:समत्वम्(अङ्कः,"ई")||समत्वम्(अङ्कः,"ी")?ईत्:
			समत्वम्(अङ्कः,"उ")||समत्वम्(अङ्कः,"ु")?उत्:समत्वम्(अङ्कः,"ऊ")||समत्वम्(अङ्कः,"ू")?ऊत्:समत्वम्(अङ्कः,"ऋ")||समत्वम्(अङ्कः,"ृ")?ऋत्:समत्वम्(अङ्कः,"ॠ")||समत्वम्(अङ्कः,"ॄ")?ॠत्:
			समत्वम्(अङ्कः,"ऌ")||समत्वम्(अङ्कः,"ॢ")?ऌत्:समत्वम्(अङ्कः,"ॡ")||समत्वम्(अङ्कः,"ॣ")?ॡत्:समत्वम्(अङ्कः,"ए")||समत्वम्(अङ्कः,"े")?एत्:समत्वम्(अङ्कः,"ऐ")||समत्वम्(अङ्कः,"ै")?ऐत्:
			समत्वम्(अङ्कः,"ओ")||समत्वम्(अङ्कः,"ो")?ओत्:समत्वम्(अङ्कः,"औ")||समत्वम्(अङ्कः,"ौ")?औत्:समत्वम्(अङ्कः,"।")||समत्वम्(अङ्कः,"॥")?(वर्णः)0:(वर्णः)0;
			if(!(समत्वम्(अङ्कः,"।")||समत्वम्(अङ्कः,"॥"))&&उपस्थितः==0)return false;
			else return true;
	};
	auto प्रक्षिप्तः=[समत्वम्](const char* अङ्कः)
	{return समत्वम्(अङ्कः,"ा")||समत्वम्(अङ्कः,"ि")||समत्वम्(अङ्कः,"ी")||समत्वम्(अङ्कः,"ु")||समत्वम्(अङ्कः,"ू")||समत्वम्(अङ्कः,"ृ")||समत्वम्(अङ्कः,"ॄ")||
		समत्वम्(अङ्कः,"ॢ")||समत्वम्(अङ्कः,"ॣ")||समत्वम्(अङ्कः,"े")||समत्वम्(अङ्कः,"ै")||समत्वम्(अङ्कः,"ो")||समत्वम्(अङ्कः,"ौ");};
	const int अनुदात्तलक्षणम् = -1;
	const int स्वरितलक्षणम् = -2;
	const int स्वरलक्षणम् = -3;
	const int मौनलक्षणम् = -7;
	while(*पाठः!='\0')
	{
		if(*पाठः>=0){पाठः++;continue;}
		वर्णः उपस्थितः;
		if(समत्वम्(पाठः,"॒"))
			स्वराः.push_back(अनुदात्तलक्षणम्);
		else if(समत्वम्(पाठः,"॑"))
			स्वराः.push_back(स्वरितलक्षणम्);
		if(!लक्ष्यः(पाठः,उपस्थितः)){पाठः+=3;continue;}
		if(अधिकारः(उपस्थितः,वर्गीयः)||अधिकारः(उपस्थितः,उष्मा)||अधिकारः(उपस्थितः,अन्तःस्थः))
		{
			if(*(पाठः+3)=='\0'||*(पाठः+3)>=0){वर्णाः.push_back(उपस्थितः);वर्णाः.push_back(अत्);}
			else if(समत्वम्(पाठः+3,"्")){वर्णाः.push_back(उपस्थितः);पाठः+=3;}
			else if(प्रक्षिप्तः(पाठः+3))वर्णाः.push_back(उपस्थितः);
			else {वर्णाः.push_back(उपस्थितः);वर्णाः.push_back(अत्);}
		}
		else वर्णाः.push_back(उपस्थितः);
		if(अधिकारः(वर्णाः.back(), स्वरः)) {
			if(वर्णाः.size()>1 && अधिकारः(*std::prev(वर्णाः.end(),2), स्वरः)) {
				वर्णाः.insert(std::prev(वर्णाः.end(),1),(वर्णः)-1);
			}
			स्वराः.push_back(स्वरलक्षणम्);
		}
		else if(वर्णाः.back()==0)
			स्वराः.push_back(मौनलक्षणम्);
		पाठः+=3;
	}
	const int उदात्तः = -4;
	const int अनुदात्तः = -5;
	const int स्वरितः = -6;
	int गतिः = उदात्तः;
	for(auto लक्षणपदम्=स्वराः.begin(); लक्षणपदम्!=स्वराः.end(); ++लक्षणपदम्) {
		auto const पश्चिमम् = std::next(लक्षणपदम्, 1);
		if(*लक्षणपदम्==मौनलक्षणम्)
			गतिः=उदात्तः;
		else if(*लक्षणपदम्==स्वरलक्षणम् && (पश्चिमम्==स्वराः.end() || *पश्चिमम्==स्वरलक्षणम् || *पश्चिमम्==मौनलक्षणम्))
			*लक्षणपदम् = गतिः;
		else if(*लक्षणपदम्==अनुदात्तलक्षणम्) {
			*std::prev(लक्षणपदम्, 1)=अनुदात्तः;
			गतिः=उदात्तः;
		}
		else if(*लक्षणपदम्==स्वरितलक्षणम्) {
			*std::prev(लक्षणपदम्, 1)=स्वरितः;
			गतिः=अनुदात्तः;
		}
	}
	
	स्वराः.erase(std::remove_if(स्वराः.begin(), स्वराः.end(), [](auto const स्वरः){
		return स्वरः==स्वरलक्षणम्||स्वरः==स्वरितलक्षणम्||स्वरः==अनुदात्तलक्षणम्||स्वरः==मौनलक्षणम्;
	}), स्वराः.end());
	return std::make_pair(वर्णाः,स्वराः);
}

int main(int argc,char *argv[])
{
	if(argc>3)
	{
		if(vtlInitialize(argv[1]))return 1;
		if(vtlSegmentSequenceToGesturalScore(argv[2],"1.ges"))return 1;
		printf("Synthesis\n");
		if(vtlGesturalScoreToAudio("1.ges",argv[3],0,0,1))return 1;
		vtlClose();
	}
	return 0;
}
